/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface OddworxInterface extends utils.Interface {
  functions: {
    "DOMAIN_SEPARATOR()": FunctionFragment;
    "NFT_HOLDING_WEEKLY_REWARD_AMOUNT()": FunctionFragment;
    "NFT_STAKING_WEEKLY_REWARD_AMOUNT()": FunctionFragment;
    "PERMIT_TYPEHASH()": FunctionFragment;
    "_genzeeContract()": FunctionFragment;
    "adminAddresses(address)": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "burn(address,uint256)": FunctionFragment;
    "buyItem(uint256,uint256)": FunctionFragment;
    "calculateNftHoldReward(uint256)": FunctionFragment;
    "calculateStakedNftRewards(uint256)": FunctionFragment;
    "claimNftHoldRewards(uint256[])": FunctionFragment;
    "claimStakedNftRewards(uint256[])": FunctionFragment;
    "decimals()": FunctionFragment;
    "latestUnstakedClaimTimestamp(uint256)": FunctionFragment;
    "mint(address,uint256)": FunctionFragment;
    "name()": FunctionFragment;
    "nftHoldRewardsActive()": FunctionFragment;
    "nonces(address)": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "stakeNfts(uint256[])": FunctionFragment;
    "stakedNft(uint256)": FunctionFragment;
    "symbol()": FunctionFragment;
    "toggleAdminContract(address)": FunctionFragment;
    "toggleNftHoldRewards()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "unpause()": FunctionFragment;
    "unstakeNfts(uint256[])": FunctionFragment;
    "updateNftStakedRewardAmount(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DOMAIN_SEPARATOR"
      | "NFT_HOLDING_WEEKLY_REWARD_AMOUNT"
      | "NFT_STAKING_WEEKLY_REWARD_AMOUNT"
      | "PERMIT_TYPEHASH"
      | "_genzeeContract"
      | "adminAddresses"
      | "allowance"
      | "approve"
      | "balanceOf"
      | "burn"
      | "buyItem"
      | "calculateNftHoldReward"
      | "calculateStakedNftRewards"
      | "claimNftHoldRewards"
      | "claimStakedNftRewards"
      | "decimals"
      | "latestUnstakedClaimTimestamp"
      | "mint"
      | "name"
      | "nftHoldRewardsActive"
      | "nonces"
      | "pause"
      | "paused"
      | "permit"
      | "stakeNfts"
      | "stakedNft"
      | "symbol"
      | "toggleAdminContract"
      | "toggleNftHoldRewards"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "unpause"
      | "unstakeNfts"
      | "updateNftStakedRewardAmount"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "NFT_HOLDING_WEEKLY_REWARD_AMOUNT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "NFT_STAKING_WEEKLY_REWARD_AMOUNT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PERMIT_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_genzeeContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "adminAddresses",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "burn",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buyItem",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateNftHoldReward",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateStakedNftRewards",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimNftHoldRewards",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "claimStakedNftRewards",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "latestUnstakedClaimTimestamp",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nftHoldRewardsActive",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "nonces", values: [string]): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "permit",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeNfts",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "stakedNft",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "toggleAdminContract",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "toggleNftHoldRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "unstakeNfts",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "updateNftStakedRewardAmount",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "NFT_HOLDING_WEEKLY_REWARD_AMOUNT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "NFT_STAKING_WEEKLY_REWARD_AMOUNT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PERMIT_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_genzeeContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adminAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buyItem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculateNftHoldReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateStakedNftRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimNftHoldRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimStakedNftRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "latestUnstakedClaimTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nftHoldRewardsActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "permit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stakeNfts", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stakedNft", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "toggleAdminContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toggleNftHoldRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unstakeNfts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateNftStakedRewardAmount",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "ItemPurchased(address,uint256,uint256)": EventFragment;
    "Paused(address)": EventFragment;
    "StakedNft(address,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
    "UnstakedNft(address,uint256,uint256)": EventFragment;
    "UserClaimedNftRewards(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ItemPurchased"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakedNft"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UnstakedNft"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UserClaimedNftRewards"): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  amount: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface ItemPurchasedEventObject {
  user: string;
  itemSKU: BigNumber;
  price: BigNumber;
}
export type ItemPurchasedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  ItemPurchasedEventObject
>;

export type ItemPurchasedEventFilter = TypedEventFilter<ItemPurchasedEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface StakedNftEventObject {
  user: string;
  genzee: BigNumber;
}
export type StakedNftEvent = TypedEvent<
  [string, BigNumber],
  StakedNftEventObject
>;

export type StakedNftEventFilter = TypedEventFilter<StakedNftEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  amount: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface UnstakedNftEventObject {
  user: string;
  genzee: BigNumber;
  amount: BigNumber;
}
export type UnstakedNftEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  UnstakedNftEventObject
>;

export type UnstakedNftEventFilter = TypedEventFilter<UnstakedNftEvent>;

export interface UserClaimedNftRewardsEventObject {
  user: string;
  genzee: BigNumber;
  amount: BigNumber;
}
export type UserClaimedNftRewardsEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  UserClaimedNftRewardsEventObject
>;

export type UserClaimedNftRewardsEventFilter =
  TypedEventFilter<UserClaimedNftRewardsEvent>;

export interface Oddworx extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: OddworxInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string]>;

    NFT_HOLDING_WEEKLY_REWARD_AMOUNT(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    NFT_STAKING_WEEKLY_REWARD_AMOUNT(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    _genzeeContract(overrides?: CallOverrides): Promise<[string]>;

    adminAddresses(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    allowance(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    burn(
      _from: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    buyItem(
      itemSKU: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    calculateNftHoldReward(
      _nftIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calculateStakedNftRewards(
      genzeeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    claimNftHoldRewards(
      genzeeIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimStakedNftRewards(
      genzeeIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    latestUnstakedClaimTimestamp(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    mint(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    nftHoldRewardsActive(overrides?: CallOverrides): Promise<[boolean]>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakeNfts(
      genzeeIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakedNft(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { ownerAddress: string; timestamp: BigNumber }
    >;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    toggleAdminContract(
      _adminAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    toggleNftHoldRewards(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unstakeNfts(
      genzeeIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateNftStakedRewardAmount(
      newAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

  NFT_HOLDING_WEEKLY_REWARD_AMOUNT(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  NFT_STAKING_WEEKLY_REWARD_AMOUNT(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  _genzeeContract(overrides?: CallOverrides): Promise<string>;

  adminAddresses(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  allowance(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  burn(
    _from: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  buyItem(
    itemSKU: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  calculateNftHoldReward(
    _nftIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateStakedNftRewards(
    genzeeId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  claimNftHoldRewards(
    genzeeIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimStakedNftRewards(
    genzeeIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  decimals(overrides?: CallOverrides): Promise<number>;

  latestUnstakedClaimTimestamp(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  mint(
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  nftHoldRewardsActive(overrides?: CallOverrides): Promise<boolean>;

  nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  permit(
    owner: string,
    spender: string,
    value: BigNumberish,
    deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakeNfts(
    genzeeIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakedNft(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber] & { ownerAddress: string; timestamp: BigNumber }
  >;

  symbol(overrides?: CallOverrides): Promise<string>;

  toggleAdminContract(
    _adminAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  toggleNftHoldRewards(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    from: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unstakeNfts(
    genzeeIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateNftStakedRewardAmount(
    newAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

    NFT_HOLDING_WEEKLY_REWARD_AMOUNT(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    NFT_STAKING_WEEKLY_REWARD_AMOUNT(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    _genzeeContract(overrides?: CallOverrides): Promise<string>;

    adminAddresses(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    allowance(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    burn(
      _from: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    buyItem(
      itemSKU: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    calculateNftHoldReward(
      _nftIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateStakedNftRewards(
      genzeeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimNftHoldRewards(
      genzeeIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    claimStakedNftRewards(
      genzeeIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    decimals(overrides?: CallOverrides): Promise<number>;

    latestUnstakedClaimTimestamp(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mint(
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    nftHoldRewardsActive(overrides?: CallOverrides): Promise<boolean>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    stakeNfts(
      genzeeIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    stakedNft(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { ownerAddress: string; timestamp: BigNumber }
    >;

    symbol(overrides?: CallOverrides): Promise<string>;

    toggleAdminContract(
      _adminAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    toggleNftHoldRewards(overrides?: CallOverrides): Promise<void>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    unpause(overrides?: CallOverrides): Promise<void>;

    unstakeNfts(
      genzeeIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    updateNftStakedRewardAmount(
      newAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      spender?: string | null,
      amount?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      spender?: string | null,
      amount?: null
    ): ApprovalEventFilter;

    "ItemPurchased(address,uint256,uint256)"(
      user?: string | null,
      itemSKU?: null,
      price?: null
    ): ItemPurchasedEventFilter;
    ItemPurchased(
      user?: string | null,
      itemSKU?: null,
      price?: null
    ): ItemPurchasedEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "StakedNft(address,uint256)"(
      user?: string | null,
      genzee?: BigNumberish | null
    ): StakedNftEventFilter;
    StakedNft(
      user?: string | null,
      genzee?: BigNumberish | null
    ): StakedNftEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      amount?: null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      amount?: null
    ): TransferEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    "UnstakedNft(address,uint256,uint256)"(
      user?: string | null,
      genzee?: BigNumberish | null,
      amount?: null
    ): UnstakedNftEventFilter;
    UnstakedNft(
      user?: string | null,
      genzee?: BigNumberish | null,
      amount?: null
    ): UnstakedNftEventFilter;

    "UserClaimedNftRewards(address,uint256,uint256)"(
      user?: string | null,
      genzee?: BigNumberish | null,
      amount?: null
    ): UserClaimedNftRewardsEventFilter;
    UserClaimedNftRewards(
      user?: string | null,
      genzee?: BigNumberish | null,
      amount?: null
    ): UserClaimedNftRewardsEventFilter;
  };

  estimateGas: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;

    NFT_HOLDING_WEEKLY_REWARD_AMOUNT(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    NFT_STAKING_WEEKLY_REWARD_AMOUNT(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    _genzeeContract(overrides?: CallOverrides): Promise<BigNumber>;

    adminAddresses(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    burn(
      _from: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    buyItem(
      itemSKU: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    calculateNftHoldReward(
      _nftIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateStakedNftRewards(
      genzeeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimNftHoldRewards(
      genzeeIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimStakedNftRewards(
      genzeeIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    latestUnstakedClaimTimestamp(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mint(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    nftHoldRewardsActive(overrides?: CallOverrides): Promise<BigNumber>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakeNfts(
      genzeeIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakedNft(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    toggleAdminContract(
      _adminAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    toggleNftHoldRewards(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unstakeNfts(
      genzeeIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateNftStakedRewardAmount(
      newAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    NFT_HOLDING_WEEKLY_REWARD_AMOUNT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    NFT_STAKING_WEEKLY_REWARD_AMOUNT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _genzeeContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    adminAddresses(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowance(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    burn(
      _from: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    buyItem(
      itemSKU: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    calculateNftHoldReward(
      _nftIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateStakedNftRewards(
      genzeeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimNftHoldRewards(
      genzeeIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimStakedNftRewards(
      genzeeIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    latestUnstakedClaimTimestamp(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mint(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nftHoldRewardsActive(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nonces(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakeNfts(
      genzeeIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakedNft(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    toggleAdminContract(
      _adminAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    toggleNftHoldRewards(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unstakeNfts(
      genzeeIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateNftStakedRewardAmount(
      newAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}

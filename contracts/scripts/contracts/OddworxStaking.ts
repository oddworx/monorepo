/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface OddworxStakingInterface extends utils.Interface {
  functions: {
    "HOLDING_REWARD()": FunctionFragment;
    "STAKING_REWARD()": FunctionFragment;
    "admin(address)": FunctionFragment;
    "buyItem(uint256,uint256,address,uint256[],address)": FunctionFragment;
    "changeRewardAmount(uint256,bool)": FunctionFragment;
    "claimRewards(address,uint256[],address)": FunctionFragment;
    "getNftData(address,uint256)": FunctionFragment;
    "nftData(address,uint256)": FunctionFragment;
    "nftHoldRewardsActive()": FunctionFragment;
    "nftInterfaces(address)": FunctionFragment;
    "oddworxContract()": FunctionFragment;
    "oddworxContractAddress()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "setOddworxAddress(address)": FunctionFragment;
    "setUserNftData(address,uint256[],address,bool,uint256,bool)": FunctionFragment;
    "stakeNfts(address,uint256[])": FunctionFragment;
    "toggleAdmin(address)": FunctionFragment;
    "toggleNftInterface(address)": FunctionFragment;
    "unpause()": FunctionFragment;
    "unstakeNftEmergency(address,uint256[],address,address)": FunctionFragment;
    "unstakeNfts(address,uint256[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "HOLDING_REWARD"
      | "STAKING_REWARD"
      | "admin"
      | "buyItem"
      | "changeRewardAmount"
      | "claimRewards"
      | "getNftData"
      | "nftData"
      | "nftHoldRewardsActive"
      | "nftInterfaces"
      | "oddworxContract"
      | "oddworxContractAddress"
      | "pause"
      | "paused"
      | "setOddworxAddress"
      | "setUserNftData"
      | "stakeNfts"
      | "toggleAdmin"
      | "toggleNftInterface"
      | "unpause"
      | "unstakeNftEmergency"
      | "unstakeNfts"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "HOLDING_REWARD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "STAKING_REWARD",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "admin", values: [string]): string;
  encodeFunctionData(
    functionFragment: "buyItem",
    values: [BigNumberish, BigNumberish, string, BigNumberish[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "changeRewardAmount",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "claimRewards",
    values: [string, BigNumberish[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "getNftData",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nftData",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nftHoldRewardsActive",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nftInterfaces",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "oddworxContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "oddworxContractAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setOddworxAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setUserNftData",
    values: [string, BigNumberish[], string, boolean, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeNfts",
    values: [string, BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "toggleAdmin", values: [string]): string;
  encodeFunctionData(
    functionFragment: "toggleNftInterface",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "unstakeNftEmergency",
    values: [string, BigNumberish[], string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "unstakeNfts",
    values: [string, BigNumberish[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "HOLDING_REWARD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "STAKING_REWARD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buyItem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeRewardAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getNftData", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nftData", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nftHoldRewardsActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nftInterfaces",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "oddworxContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "oddworxContractAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setOddworxAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUserNftData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stakeNfts", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "toggleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toggleNftInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unstakeNftEmergency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unstakeNfts",
    data: BytesLike
  ): Result;

  events: {
    "ItemPurchased(address,uint256,uint256)": EventFragment;
    "Paused(address)": EventFragment;
    "StakedNft(address,address,uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
    "UnstakedNft(address,address,uint256,address)": EventFragment;
    "UserClaimedRewards(address,address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ItemPurchased"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakedNft"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UnstakedNft"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UserClaimedRewards"): EventFragment;
}

export interface ItemPurchasedEventObject {
  user: string;
  itemSKU: BigNumber;
  price: BigNumber;
}
export type ItemPurchasedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  ItemPurchasedEventObject
>;

export type ItemPurchasedEventFilter = TypedEventFilter<ItemPurchasedEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface StakedNftEventObject {
  user: string;
  nftContract: string;
  nftId: BigNumber;
}
export type StakedNftEvent = TypedEvent<
  [string, string, BigNumber],
  StakedNftEventObject
>;

export type StakedNftEventFilter = TypedEventFilter<StakedNftEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface UnstakedNftEventObject {
  user: string;
  nftContract: string;
  nftId: BigNumber;
  to: string;
}
export type UnstakedNftEvent = TypedEvent<
  [string, string, BigNumber, string],
  UnstakedNftEventObject
>;

export type UnstakedNftEventFilter = TypedEventFilter<UnstakedNftEvent>;

export interface UserClaimedRewardsEventObject {
  user: string;
  nftContract: string;
  nftId: BigNumber;
  amount: BigNumber;
}
export type UserClaimedRewardsEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  UserClaimedRewardsEventObject
>;

export type UserClaimedRewardsEventFilter =
  TypedEventFilter<UserClaimedRewardsEvent>;

export interface OddworxStaking extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: OddworxStakingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    HOLDING_REWARD(overrides?: CallOverrides): Promise<[BigNumber]>;

    STAKING_REWARD(overrides?: CallOverrides): Promise<[BigNumber]>;

    admin(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    buyItem(
      itemSKU: BigNumberish,
      amount: BigNumberish,
      nftContract: string,
      nftIds: BigNumberish[],
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeRewardAmount(
      newAmount: BigNumberish,
      changeStaking: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimRewards(
      nftContract: string,
      nftIds: BigNumberish[],
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getNftData(
      nftContract: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, boolean, BigNumber, boolean]>;

    nftData(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, boolean, BigNumber, boolean] & {
        ownerAddress: string;
        staked: boolean;
        timestamp: BigNumber;
        legacyStaking: boolean;
      }
    >;

    nftHoldRewardsActive(overrides?: CallOverrides): Promise<[boolean]>;

    nftInterfaces(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    oddworxContract(overrides?: CallOverrides): Promise<[string]>;

    oddworxContractAddress(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    setOddworxAddress(
      address_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setUserNftData(
      nftContract: string,
      nftIds: BigNumberish[],
      newOwner: string,
      isStaked: boolean,
      newTimestamp: BigNumberish,
      usingLegacyStaking: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakeNfts(
      nftContract: string,
      nftIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    toggleAdmin(
      address_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    toggleNftInterface(
      address_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unstakeNftEmergency(
      nftContract: string,
      nftIds: BigNumberish[],
      user: string,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unstakeNfts(
      nftContract: string,
      nftIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  HOLDING_REWARD(overrides?: CallOverrides): Promise<BigNumber>;

  STAKING_REWARD(overrides?: CallOverrides): Promise<BigNumber>;

  admin(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  buyItem(
    itemSKU: BigNumberish,
    amount: BigNumberish,
    nftContract: string,
    nftIds: BigNumberish[],
    user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeRewardAmount(
    newAmount: BigNumberish,
    changeStaking: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimRewards(
    nftContract: string,
    nftIds: BigNumberish[],
    user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getNftData(
    nftContract: string,
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, boolean, BigNumber, boolean]>;

  nftData(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, boolean, BigNumber, boolean] & {
      ownerAddress: string;
      staked: boolean;
      timestamp: BigNumber;
      legacyStaking: boolean;
    }
  >;

  nftHoldRewardsActive(overrides?: CallOverrides): Promise<boolean>;

  nftInterfaces(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  oddworxContract(overrides?: CallOverrides): Promise<string>;

  oddworxContractAddress(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  setOddworxAddress(
    address_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setUserNftData(
    nftContract: string,
    nftIds: BigNumberish[],
    newOwner: string,
    isStaked: boolean,
    newTimestamp: BigNumberish,
    usingLegacyStaking: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakeNfts(
    nftContract: string,
    nftIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  toggleAdmin(
    address_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  toggleNftInterface(
    address_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unstakeNftEmergency(
    nftContract: string,
    nftIds: BigNumberish[],
    user: string,
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unstakeNfts(
    nftContract: string,
    nftIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    HOLDING_REWARD(overrides?: CallOverrides): Promise<BigNumber>;

    STAKING_REWARD(overrides?: CallOverrides): Promise<BigNumber>;

    admin(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    buyItem(
      itemSKU: BigNumberish,
      amount: BigNumberish,
      nftContract: string,
      nftIds: BigNumberish[],
      user: string,
      overrides?: CallOverrides
    ): Promise<void>;

    changeRewardAmount(
      newAmount: BigNumberish,
      changeStaking: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    claimRewards(
      nftContract: string,
      nftIds: BigNumberish[],
      user: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getNftData(
      nftContract: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, boolean, BigNumber, boolean]>;

    nftData(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, boolean, BigNumber, boolean] & {
        ownerAddress: string;
        staked: boolean;
        timestamp: BigNumber;
        legacyStaking: boolean;
      }
    >;

    nftHoldRewardsActive(overrides?: CallOverrides): Promise<boolean>;

    nftInterfaces(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    oddworxContract(overrides?: CallOverrides): Promise<string>;

    oddworxContractAddress(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    setOddworxAddress(
      address_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setUserNftData(
      nftContract: string,
      nftIds: BigNumberish[],
      newOwner: string,
      isStaked: boolean,
      newTimestamp: BigNumberish,
      usingLegacyStaking: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    stakeNfts(
      nftContract: string,
      nftIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    toggleAdmin(address_: string, overrides?: CallOverrides): Promise<void>;

    toggleNftInterface(
      address_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    unstakeNftEmergency(
      nftContract: string,
      nftIds: BigNumberish[],
      user: string,
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unstakeNfts(
      nftContract: string,
      nftIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ItemPurchased(address,uint256,uint256)"(
      user?: string | null,
      itemSKU?: null,
      price?: null
    ): ItemPurchasedEventFilter;
    ItemPurchased(
      user?: string | null,
      itemSKU?: null,
      price?: null
    ): ItemPurchasedEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "StakedNft(address,address,uint256)"(
      user?: string | null,
      nftContract?: string | null,
      nftId?: BigNumberish | null
    ): StakedNftEventFilter;
    StakedNft(
      user?: string | null,
      nftContract?: string | null,
      nftId?: BigNumberish | null
    ): StakedNftEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    "UnstakedNft(address,address,uint256,address)"(
      user?: string | null,
      nftContract?: string | null,
      nftId?: BigNumberish | null,
      to?: null
    ): UnstakedNftEventFilter;
    UnstakedNft(
      user?: string | null,
      nftContract?: string | null,
      nftId?: BigNumberish | null,
      to?: null
    ): UnstakedNftEventFilter;

    "UserClaimedRewards(address,address,uint256,uint256)"(
      user?: string | null,
      nftContract?: string | null,
      nftId?: BigNumberish | null,
      amount?: null
    ): UserClaimedRewardsEventFilter;
    UserClaimedRewards(
      user?: string | null,
      nftContract?: string | null,
      nftId?: BigNumberish | null,
      amount?: null
    ): UserClaimedRewardsEventFilter;
  };

  estimateGas: {
    HOLDING_REWARD(overrides?: CallOverrides): Promise<BigNumber>;

    STAKING_REWARD(overrides?: CallOverrides): Promise<BigNumber>;

    admin(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    buyItem(
      itemSKU: BigNumberish,
      amount: BigNumberish,
      nftContract: string,
      nftIds: BigNumberish[],
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeRewardAmount(
      newAmount: BigNumberish,
      changeStaking: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimRewards(
      nftContract: string,
      nftIds: BigNumberish[],
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getNftData(
      nftContract: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nftData(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nftHoldRewardsActive(overrides?: CallOverrides): Promise<BigNumber>;

    nftInterfaces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    oddworxContract(overrides?: CallOverrides): Promise<BigNumber>;

    oddworxContractAddress(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    setOddworxAddress(
      address_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setUserNftData(
      nftContract: string,
      nftIds: BigNumberish[],
      newOwner: string,
      isStaked: boolean,
      newTimestamp: BigNumberish,
      usingLegacyStaking: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakeNfts(
      nftContract: string,
      nftIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    toggleAdmin(
      address_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    toggleNftInterface(
      address_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unstakeNftEmergency(
      nftContract: string,
      nftIds: BigNumberish[],
      user: string,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unstakeNfts(
      nftContract: string,
      nftIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    HOLDING_REWARD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    STAKING_REWARD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    admin(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buyItem(
      itemSKU: BigNumberish,
      amount: BigNumberish,
      nftContract: string,
      nftIds: BigNumberish[],
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeRewardAmount(
      newAmount: BigNumberish,
      changeStaking: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimRewards(
      nftContract: string,
      nftIds: BigNumberish[],
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getNftData(
      nftContract: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nftData(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nftHoldRewardsActive(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nftInterfaces(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    oddworxContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    oddworxContractAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setOddworxAddress(
      address_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setUserNftData(
      nftContract: string,
      nftIds: BigNumberish[],
      newOwner: string,
      isStaked: boolean,
      newTimestamp: BigNumberish,
      usingLegacyStaking: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakeNfts(
      nftContract: string,
      nftIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    toggleAdmin(
      address_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    toggleNftInterface(
      address_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unstakeNftEmergency(
      nftContract: string,
      nftIds: BigNumberish[],
      user: string,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unstakeNfts(
      nftContract: string,
      nftIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
